{
    "rpk acl": {
        "description": "Manage ACLs and SASL users.\n\nThis command space creates, lists, and deletes ACLs, as well as creates SASL\nusers. The help text below is specific to ACLs. To learn about SASL users,\ncheck the help text under the \"user\" command.\n\nWhen using SASL, ACLs allow or deny you access to certain requests. The\n\"create\", \"delete\", and \"list\" commands help you manage your ACLs.\n\nAn ACL is made up of five components:\n\n  * a principal (the user)\n  * a host the principal is allowed or denied requests from\n  * what resource to access (topic name, group ID, ...)\n  * the operation (read, write, ...)\n  * the permission: whether to allow or deny the above\n\nACL commands work on a multiplicative basis. If creating, specifying two\nprincipals and two permissions creates four ACLs: both permissions for the\nfirst principal, as well as both permissions for the second principal. Adding\ntwo resources further doubles the ACLs created.\n\nIt is recommended to be as specific as possible when granting ACLs. Granting\nmore ACLs than necessary per principal may inadvertently allow clients to do\nthings they should not, such as deleting topics or joining the wrong consumer\ngroup.\n\nPRINCIPALS\n\nAll ACLs require a principal. A principal is composed of two parts: the type\nand the name. Within Redpanda, only one type is supported, \"User\". The reason\nfor the prefix is that a potential future authorizer may add support for\nauthorizing by Group or anything else.\n\nWhen you create a user, you need to add ACLs for it before it can be used. You\ncan create / delete / list ACLs for that user with either \"User:bar\" or \"bar\"\nin the --allow-principal and --deny-principal flags. This command will add the\n\"User:\" prefix for you if it is missing. The wildcard '*' matches any user.\nCreating an ACL with user '*' grants or denies the permission for all users.\n\nHOSTS\n\nHosts can be seen as an extension of the principal, and effectively gate where\nthe principal can connect from. When creating ACLs, unless otherwise specified,\nthe default host is the wildcard '*' which allows or denies the principal from\nall hosts (where allow & deny are based on whether --allow-principal or\n--deny-principal is used). If specifying hosts, you must pair the --allow-host\nflag with the --allow-principal flag, and the --deny-host flag with the\n--deny-principal flag.\n\nRESOURCES\n\nA resource is what an ACL allows or denies access to. There are four resources\nwithin Redpanda: topics, groups, the cluster itself, and transactional IDs.\nNames for each of these resources can be specified with their respective flags.\n\nResources combine with the operation that is allowed or denied on that\nresource. The next section describes which operations are required for which\nrequests, and further fleshes out the concept of a resource.\n\nBy default, resources are specified on an exact name match (a \"literal\" match).\nThe --resource-pattern-type flag can be used to specify that a resource name is\n\"prefixed\", meaning to allow anything with the given prefix. A literal name of\n\"foo\" will match only the topic \"foo\", while the prefixed name of \"foo-\" will\nmatch both \"foo-bar\" and \"foo-baz\". The special wildcard resource name '*'\nmatches any name of the given resource type (--topic '*' matches all topics).\n\nOPERATIONS\n\nPairing with resources, operations are the actions that are allowed or denied.\nRedpanda has the following operations:\n\n    ALL                 Allows all operations below.\n    READ                Allows reading a given resource.\n    WRITE               Allows writing to a given resource.\n    CREATE              Allows creating a given resource.\n    DELETE              Allows deleting a given resource.\n    ALTER               Allows altering non-configurations.\n    DESCRIBE            Allows querying non-configurations.\n    DESCRIBE_CONFIGS    Allows describing configurations.\n    ALTER_CONFIGS       Allows altering configurations.\n\nCheck --help-operations to see which operations are required for which\nrequests. In flag form to set up a general producing/consuming client, you can\ninvoke 'rpk acl create' three times with the following (including your\n--allow-principal):\n\n    --operation write,read,describe --topic [topics]\n    --operation describe,read --group [group.id]\n    --operation describe,write --transactional-id [transactional.id]\n\nPERMISSIONS\n\nA client can be allowed access or denied access. By default, all permissions\nare denied. You only need to specifically deny a permission if you allow a wide\nset of permissions and then want to deny a specific permission in that set.\nYou could allow all operations, and then specifically deny writing to topics.\n\nMANAGEMENT\n\nCreating ACLs works on a specific ACL basis, but listing and deleting ACLs\nworks on filters. Filters allow matching many ACLs to be printed listed and\ndeleted at once. Because this can be risky for deleting, the delete command\nprompts for confirmation by default. More details and examples for creating,\nlisting, and deleting can be seen in each of the commands.\n\nUsing SASL requires setting \"enable_sasl: true\" in the redpanda section of your\nredpanda.yaml. User management is a separate, simpler concept that is\ndescribed in the user command.",
        "usage": "Usage:\n  rpk acl [flags]\n  rpk acl [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for acl."
            },
            "--help-operations": {
                "type": "-",
                "description": "Print more help about ACL operations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl create": {
        "description": "Create ACLs.\n\nSee the 'rpk acl' help text for a full write up on ACLs. Following the\nmultiplying effect of combining flags, the create command works on a\nstraightforward basis: every ACL combination is a created ACL.\n\nAs mentioned in the 'rpk acl' help text, if no host is specified, an allowed\nprincipal is allowed access from all hosts. The wildcard principal '*' allows\nall principals. At least one principal, one host, one resource, and one\noperation is required to create a single ACL.\n\nAllow all permissions to user bar on topic \"foo\" and group \"g\":\n    --allow-principal bar --operation all --topic foo --group g\nAllow read permissions to all users on topics biz and baz:\n    --allow-principal '*' --operation read --topic biz,baz\nAllow write permissions to user buzz to transactional id \"txn\":\n    --allow-principal User:buzz --operation write --transactional-id txn",
        "usage": "Usage:\n  rpk acl create [flags]",
        "flags": {
            "--allow-host": {
                "type": "strings",
                "description": "Hosts from which access will be granted (repeatable)."
            },
            "--allow-principal": {
                "type": "strings",
                "description": "Principals for which these permissions will be granted (repeatable)."
            },
            "--cluster": {
                "type": "-",
                "description": "Whether to grant ACLs to the cluster."
            },
            "--deny-host": {
                "type": "strings",
                "description": "Hosts from from access will be denied (repeatable)."
            },
            "--deny-principal": {
                "type": "strings",
                "description": "Principal for which these permissions will be denied (repeatable)."
            },
            "--group": {
                "type": "strings",
                "description": "Group to grant ACLs for (repeatable)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for create."
            },
            "--operation": {
                "type": "strings",
                "description": "Operation to grant (repeatable)."
            },
            "--resource-pattern-type": {
                "type": "string",
                "description": "Pattern to use when matching resource names (literal or prefixed) (default \"literal\")."
            },
            "--topic": {
                "type": "strings",
                "description": "Topic to grant ACLs for (repeatable)."
            },
            "--transactional-id": {
                "type": "strings",
                "description": "Transactional IDs to grant ACLs for (repeatable)."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl delete": {
        "description": "Delete ACLs.\n\nSee the 'rpk acl' help text for a full write up on ACLs. Delete flags work in a\nsimilar multiplying effect as creating ACLs, but delete is more advanced:\ndeletion works on a filter basis. Any unspecified flag defaults to matching\neverything (all operations, or all allowed principals, etc). To ensure that you\ndo not accidentally delete more than you intend, this command prints everything\nthat matches your input filters and prompts for a confirmation before the\ndelete request is issued. Anything matching more than 10 ACLs doubly confirms.\n\nAs mentioned, not specifying flags matches everything. If no resources are\nspecified, all resources are matched. If no operations are specified, all\noperations are matched. You can also opt in to matching everything with \"any\":\n--operation any matches any operation.\n\nThe --resource-pattern-type, defaulting to \"any\", configures how to filter\nresource names:\n  * \"any\" returns exact name matches of either prefixed or literal pattern type\n  * \"match\" returns wildcard matches, prefix patterns that match your input, and literal matches\n  * \"prefix\" returns prefix patterns that match your input (prefix \"fo\" matches \"foo\")\n  * \"literal\" returns exact name matches",
        "usage": "Usage:\n  rpk acl delete [flags]",
        "flags": {
            "--allow-host": {
                "type": "strings",
                "description": "Allowed host ACLs to remove (repeatable)."
            },
            "--allow-principal": {
                "type": "strings",
                "description": "Allowed principal ACLs to remove (repeatable)."
            },
            "--cluster": {
                "type": "-",
                "description": "Whether to remove ACLs to the cluster."
            },
            "--deny-host": {
                "type": "strings",
                "description": "Denied host ACLs to remove (repeatable)."
            },
            "--deny-principal": {
                "type": "strings",
                "description": "Denied principal ACLs to remove (repeatable)."
            },
            "-d, --dry": {
                "type": "-",
                "description": "Dry run: validate what would be deleted."
            },
            "--group": {
                "type": "strings",
                "description": "Group to remove ACLs for (repeatable)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for delete."
            },
            "--no-confirm": {
                "type": "-",
                "description": "Disable confirmation prompt."
            },
            "--operation": {
                "type": "strings",
                "description": "Operation to remove (repeatable)."
            },
            "-f, --print-filters": {
                "type": "-",
                "description": "Print the filters that were requested (failed filters are always printed)."
            },
            "--resource-pattern-type": {
                "type": "string",
                "description": "Pattern to use when matching resource names (any, match, literal, or prefixed) (default \"any\")."
            },
            "--topic": {
                "type": "strings",
                "description": "Topic to remove ACLs for (repeatable)."
            },
            "--transactional-id": {
                "type": "strings",
                "description": "Transactional IDs to remove ACLs for (repeatable)."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl list": {
        "description": "List ACLs.\n\nSee the 'rpk acl' help text for a full write up on ACLs. List flags work in a\nsimilar multiplying effect as creating ACLs, but list is more advanced:\nlisting works on a filter basis. Any unspecified flag defaults to matching\neverything (all operations, or all allowed principals, etc).\n\nAs mentioned, not specifying flags matches everything. If no resources are\nspecified, all resources are matched. If no operations are specified, all\noperations are matched. You can also opt in to matching everything with \"any\":\n--operation any matches any operation.\n\nThe --resource-pattern-type, defaulting to \"any\", configures how to filter\nresource names:\n  * \"any\" returns exact name matches of either prefixed or literal pattern type\n  * \"match\" returns wildcard matches, prefix patterns that match your input, and literal matches\n  * \"prefix\" returns prefix patterns that match your input (prefix \"fo\" matches \"foo\")\n  * \"literal\" returns exact name matches",
        "usage": "Usage:\n  rpk acl list [flags]\n\nAliases:\n  list, ls, describe",
        "flags": {
            "--allow-host": {
                "type": "strings",
                "description": "Allowed host ACLs to match (repeatable)."
            },
            "--allow-principal": {
                "type": "strings",
                "description": "Allowed principal ACLs to match (repeatable)."
            },
            "--cluster": {
                "type": "-",
                "description": "Whether to match ACLs to the cluster."
            },
            "--deny-host": {
                "type": "strings",
                "description": "Denied host ACLs to match (repeatable)."
            },
            "--deny-principal": {
                "type": "strings",
                "description": "Denied principal ACLs to match (repeatable)."
            },
            "--group": {
                "type": "strings",
                "description": "Group to match ACLs for (repeatable)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "--operation": {
                "type": "strings",
                "description": "Operation to match (repeatable)."
            },
            "-f, --print-filters": {
                "type": "-",
                "description": "Print the filters that were requested (failed filters are always printed)."
            },
            "--resource-pattern-type": {
                "type": "string",
                "description": "Pattern to use when matching resource names (any, match, literal, or prefixed) (default \"any\")."
            },
            "--topic": {
                "type": "strings",
                "description": "Topic to match ACLs for (repeatable)."
            },
            "--transactional-id": {
                "type": "strings",
                "description": "Transactional IDs to match ACLs for (repeatable)."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl user": {
        "description": "Manage SASL users.\n\nIf SASL is enabled, a SASL user is what you use to talk to Redpanda, and ACLs\ncontrol what your user has access to. See 'rpk acl --help' for more information\nabout ACLs, and 'rpk acl user create --help' for more information about\ncreating SASL users. Using SASL requires setting \"enable_sasl: true\" in the\nredpanda section of your redpanda.yaml.",
        "usage": "Usage:\n  rpk acl user [command]",
        "flags": {
            "--api-urls": {
                "type": "strings",
                "description": "The comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for user."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl user create": {
        "description": "Create a SASL user.\n\nThis command creates a single SASL user with the given password, optionally\nwith a custom \"mechanism\". SASL consists of three parts: a username, a\npassword, and a mechanism. The mechanism determines which authentication flow\nthe client will use for this user/pass.\n\nRedpanda currently supports two mechanisms: SCRAM-SHA-256, the default, and\nSCRAM-SHA-512, which is the same flow but uses sha512 rather than sha256.\n\nUsing SASL requires setting \"enable_sasl: true\" in the redpanda section of your\nredpanda.yaml. Before a created SASL account can be used, you must also create\nACLs to grant the account access to certain resources in your cluster. See the\nacl help text for more info.",
        "usage": "Usage:\n  rpk acl user create [USER] -p [PASS] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for create."
            },
            "--mechanism": {
                "type": "string",
                "description": "SASL mechanism to use for the user you are creating (scram-sha-256, scram-sha-512, case insensitive); not to be confused with the global flag --sasl-mechanism which is used for authenticating the rpk client (default \"scram-sha-256\")."
            },
            "--password": {
                "type": "string",
                "description": "New user's password (NOTE: if using --password for the admin API, use --new-password)."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "strings",
                "description": "The comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl user delete": {
        "description": "Delete a SASL user.\n\nThis command deletes the specified SASL account from Redpanda. This does not\ndelete any ACLs that may exist for this user.",
        "usage": "Usage:\n  rpk acl user delete [USER] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for delete."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "strings",
                "description": "The comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk acl user list": {
        "description": "List SASL users",
        "usage": "Usage:\n  rpk acl user list [flags]\n\nAliases:\n  list, ls",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "strings",
                "description": "The comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud": {
        "description": "Interact with Redpanda cloud",
        "usage": "Usage:\n  rpk cloud [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for cloud."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud byoc": {
        "description": "Manage a Redpanda cloud BYOC agent\n\nFor BYOC, Redpanda installs an agent service in your owned cluster. The agent\nthen proceeds to provision further infrastructure and eventually, a full\nRedpanda cluster.\n\nThe BYOC command runs Terraform to create and start the agent. You first need\na redpanda-id (or cluster ID); this is used to get the details of how your\nagent should be provisioned. You can create a BYOC cluster in our cloud UI\nand then come back to this command to complete the process.",
        "usage": "Usage:\n  rpk cloud byoc [flags]\n  rpk cloud byoc [command]",
        "flags": {
            "--client-id": {
                "type": "string",
                "description": "The client ID of the organization in Redpanda Cloud."
            },
            "--client-secret": {
                "type": "string",
                "description": "The client secret of the organization in Redpanda Cloud."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for byoc."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud byoc install": {
        "description": "Install the BYOC plugin\n\nThis command downloads the BYOC managed plugin if necessary. The plugin is\ninstalled by default if you try to run a non-install command, but this command\nexists if you want to download the plugin ahead of time.",
        "usage": "Usage:\n  rpk cloud byoc install [flags]",
        "flags": {
            "--client-id": {
                "type": "string",
                "description": "The client ID of the organization in Redpanda Cloud."
            },
            "--client-secret": {
                "type": "string",
                "description": "The client secret of the organization in Redpanda Cloud."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for install."
            },
            "--redpanda-id": {
                "type": "string",
                "description": "The redpanda ID of the cluster you are creating."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud byoc uninstall": {
        "description": "Uninstall the BYOC plugin\n\nThis command deletes your locally downloaded BYOC managed plugin if it exists.\nOften, you only need to download the plugin to create your cluster once, and\nthen you never need the plugin again. You can uninstall to save a small bit of\ndisk space.",
        "usage": "Usage:\n  rpk cloud byoc uninstall [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for uninstall."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud login": {
        "description": "Log in to the Redpanda cloud\n\nThis command checks for an existing token and, if present, ensures it is still\nvalid. If no token is found or the token is no longer valid, this command will\nlogin and save your token.\n\nYou may use any of the following methods to pass the cloud credentials to rpk:\n\nLogging in requires cloud credentials, which can be created in the Clients\ntab of the Users section in the Redpanda Cloud online interface. Client\ncredentials can be provided in three ways, in order of preference:\n\n* In $HOME/.config/rpk/__cloud.yaml, in 'client_id' and 'client_secret' fields\n* Through RPK_CLOUD_CLIENT_ID and RPK_CLOUD_CLIENT_SECRET environment variables\n* Through the --client-id and --client-secret flags\n\nIf none of these are provided, login will prompt you for the client ID and\nclient secret and will save them to the __cloud.yaml file. If you specify\nenvironment variables or flags, they will not be synced to the __cloud.yaml\nfile unless the --save flag is passed. The cloud authorization token is always \nsynced.",
        "usage": "Usage:\n  rpk cloud login [flags]",
        "flags": {
            "--client-id": {
                "type": "string",
                "description": "The client ID of the organization in Redpanda Cloud."
            },
            "--client-secret": {
                "type": "string",
                "description": "The client secret of the organization in Redpanda Cloud."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for login."
            },
            "--save": {
                "type": "-",
                "description": "Save environment or flag specified client ID and client secret to the configuration file."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cloud logout": {
        "description": "Log out from Redpanda cloud\n\nThis command deletes your cloud auth token. If you want to log out entirely and\nswitch to a different organization, you can use the --clear-credentials flag to\nadditionally clear your client ID and client secret.",
        "usage": "Usage:\n  rpk cloud logout [flags]",
        "flags": {
            "-c, --clear-credentials": {
                "type": "-",
                "description": "Clear the client ID and client secret in addition to the auth token."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for logout."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster": {
        "description": "Interact with a Redpanda cluster",
        "usage": "Usage:\n  rpk cluster [command]",
        "flags": {
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for cluster."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config": {
        "description": "Interact with cluster configuration properties.\n\nCluster properties are redpanda settings which apply to all nodes in\nthe cluster.  These are separate to node properties, which are set with\n'rpk redpanda config'.\n\nUse the 'edit' subcommand to interactively modify the cluster configuration, or\n'export' and 'import' to write configuration to a file that can be edited and\nread back later.\n\nThese commands take an optional '--all' flag to include all properties including\nlow level tunables such as internal buffer sizes, that do not usually need\nto be changed during normal operations.  These properties generally require\nsome expertize to set safely, so if in doubt, avoid using '--all'.\n\nModified properties are propagated immediately to all nodes.  The 'status'\nsubcommand can be used to verify that all nodes are up to date, and identify\nany settings which were rejected by a node, for example if a node is running a\ndifferent redpanda version that does not recognize certain properties.",
        "usage": "Usage:\n  rpk cluster config [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for config."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config edit": {
        "description": "Edit cluster-wide configuration properties.\n\nThis command opens a text editor to modify the cluster's configuration.\n\nCluster properties are redpanda settings which apply to all nodes in\nthe cluster.  These are separate to node properties, which are set with\n'rpk redpanda config'.\n\nModified values are written back when the file is saved and the editor\nis closed.  Properties which are deleted are reset to their default\nvalues.\n\nBy default, low level tunables are excluded: use the '--all' flag\nto edit all properties including these tunables.",
        "usage": "Usage:\n  rpk cluster config edit [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for edit."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config export": {
        "description": "Export cluster configuration.\n\nWrites out a YAML representation of the cluster configuration to a file,\nsuitable for editing and later applying with the corresponding 'import'\ncommand.\n\nBy default, low level tunables are excluded: use the '--all' flag\nto include all properties including these low level tunables.",
        "usage": "Usage:\n  rpk cluster config export [flags]",
        "flags": {
            "-f, --filename": {
                "type": "string",
                "description": "path to file to export to, e.g. './config.yml'."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for export."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config force-reset": {
        "description": "Forcibly clear a cluster configuration property on this node.\n\nThis command is not for general changes to cluster configuration: use this only\nwhen redpanda will not start due to a configuration issue.\n\nIf your cluster is working properly and you would like to reset a property\nto its default, you may use the 'set' command with an empty string, or\nuse the 'edit' command and delete the property's line.\n\nThis command erases a named property from an internal cache of the cluster\nconfiguration on the local node, so that on next startup redpanda will treat\nthe setting as if it was set to the default.\n\nWARNING: this should only be used when redpanda is not running.",
        "usage": "Usage:\n  rpk cluster config force-reset [PROPERTY...] [flags]",
        "flags": {
            "--cache-file": {
                "type": "string",
                "description": "location of configuration cache file (defaults to redpanda data directory)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for force-reset."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config get": {
        "description": "Get a cluster configuration property.\n\nThis command is provided for use in scripts.  For interactive editing, or bulk\noutput, use the 'edit' and 'export' commands respectively.",
        "usage": "Usage:\n  rpk cluster config get <key> [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for get."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config import": {
        "description": "Import cluster configuration from a file.\n\nImport configuration from a YAML file, usually generated with\ncorresponding 'export' command.  This downloads the current cluster\nconfiguration, calculates the difference with the YAML file, and\nupdates any properties that were changed.  If a property is removed\nfrom the YAML file, it is reset to its default value.",
        "usage": "Usage:\n  rpk cluster config import [flags]",
        "flags": {
            "-f, --filename": {
                "type": "string",
                "description": "full path to file to import, e.g. '/tmp/config.yml'."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for import."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config lint": {
        "description": "Remove any deprecated content from redpanda.yaml.\n\nDeprecated content includes properties which were set via redpanda.yaml\nin earlier versions of redpanda, but are now managed via Redpanda's\ncentral configuration store (and via 'rpk cluster config edit').",
        "usage": "Usage:\n  rpk cluster config lint [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for lint."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config set": {
        "description": "Set a single cluster configuration property.\n\nThis command is provided for use in scripts.  For interactive editing, or bulk\nchanges, use the 'edit' and 'import' commands respectively.\n\nIf an empty string is given as the value, the property is reset to its default.",
        "usage": "Usage:\n  rpk cluster config set <key> <value> [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for set."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster config status": {
        "description": "Get configuration status of redpanda nodes.\n\nFor each node, indicate whether a restart is required for settings to\ntake effect, and any settings that the node has identified as invalid\nor unknown properties.\n\nAdditionally show the version of cluster configuration that each node\nhas applied: under normal circumstances these should all be equal,\na lower number shows that a node is out of sync, perhaps because it\nis offline.",
        "usage": "Usage:\n  rpk cluster config status [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for status."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--all": {
                "type": "-",
                "description": "Include all properties, including tunables."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster health": {
        "description": "Queries health overview.\n\nHealth overview is created based on the health reports collected periodically\nfrom all nodes in the cluster. A cluster is considered healthy when the\nfollowing conditions are met:\n\n* all cluster nodes are responding\n* all partitions have leaders\n* the cluster controller is present",
        "usage": "Usage:\n  rpk cluster health [flags]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "-e, --exit-when-healthy": {
                "type": "-",
                "description": "When used with watch, exits after cluster is back in healthy state."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for health."
            },
            "-w, --watch": {
                "type": "-",
                "description": "Blocks and writes out all cluster health changes."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster license": {
        "description": "Manage cluster license",
        "usage": "Usage:\n  rpk cluster license [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for license."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster license info": {
        "description": "Retrieve license information:\n\n    Organization:    Organization the license was generated for.\n    Type:            Type of license: free, enterprise, etc.\n    Expires:         Expiration date of the license\n    Version:         License schema version.",
        "usage": "Usage:\n  rpk cluster license info [flags]",
        "flags": {
            "--format": {
                "type": "string",
                "description": "Output format (text, json) (default \"text\")."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for info."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster license set": {
        "description": "Upload license to the cluster\n\nYou can either provide a path to a file containing the license:\n\n    rpk cluster license set --path /home/organization/redpanda.license\n\nOr inline the license string:\n\n    rpk cluster license set <license string>\n\nIf neither are present, rpk will look for the license in the\ndefault location '/etc/redpanda/redpanda.license'.",
        "usage": "Usage:\n  rpk cluster license set [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for set."
            },
            "--path": {
                "type": "string",
                "description": "Path to the license file."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster logdirs": {
        "description": "Describe log directories on Redpanda brokers",
        "usage": "Usage:\n  rpk cluster logdirs [command]",
        "flags": {
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for logdirs."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster logdirs describe": {
        "description": "Describe log directories on Redpanda brokers.\n\nThis command prints information about log directories on brokers, particularly,\nthe base directory that topics and partitions are located in, and the size of\ndata that has been written to the partitions. The size you see may not exactly\nmatch the size on disk as reported by du: Redpanda allocates files in chunks.\nThe chunks will show up in du, while the actual bytes so far written to the\nfile will show up in this command.\n\nThe directory returned is the root directory for partitions. Within Redpanda,\nthe partition data lives underneath the the returned root directory in\n\n    kafka/{topic}/{partition}_{revision}/\n\nwhere revision is a Redpanda internal concept.",
        "usage": "Usage:\n  rpk cluster logdirs describe [flags]",
        "flags": {
            "--aggregate-into": {
                "type": "string",
                "description": "If non-empty, what column to aggregate into starting from the partition column (broker, dir, topic)."
            },
            "-b, --broker": {
                "type": "int32",
                "description": "If non-negative, the specific broker to describe (default -1)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for describe."
            },
            "--sort-by-size": {
                "type": "-",
                "description": "If true, sort by size."
            },
            "--topics": {
                "type": "strings",
                "description": "Specific topics to describe."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster maintenance": {
        "description": "Interact with cluster maintenance mode.\n\nMaintenance mode is a state that a node may be placed into in which the node\nmay be shutdown or restarted with minimal disruption to client workloads. The\nprimary use of maintenance mode is to perform a rolling upgrade in which each\nnode is placed into maintenance mode prior to upgrading the node.\n\nUse the 'enable' and 'disable' subcommands to place a node into maintenance mode\nor remove it, respectively. Only one node at a time may be in maintenance mode.\n\nWhen a node is placed into maintenance mode the following occurs:\n\nLeadership draining. All raft leadership is transferred to another eligible\nnode, and the node in maintenance mode rejects new leadership requests. By\ntransferring leadership off of the node in maintenance mode all client traffic\nand requests are directed to other nodes minimizing disruption to client\nworkloads when the node is shutdown.\n\nCurrently leadership is not transferred for partitions with one replica.",
        "usage": "Usage:\n  rpk cluster maintenance [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for maintenance."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster maintenance disable": {
        "description": "Disable maintenance mode for a node.",
        "usage": "Usage:\n  rpk cluster maintenance disable <broker-id> [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for disable."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster maintenance enable": {
        "description": "Enable maintenance mode for a node.\n\nThis command enables maintenance mode for the node with the specified ID. If a\nnode exists that is already in maintenance mode then an error will be returned.",
        "usage": "Usage:\n  rpk cluster maintenance enable <node-id> [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for enable."
            },
            "-w, --wait": {
                "type": "-",
                "description": "Wait until node is drained."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster maintenance status": {
        "description": "Report maintenance status.\n\nThis command reports maintenance status for each node in the cluster. The output\nis presented as a table with each row representing a node in the cluster.  The\noutput can be used to monitor the progress of node draining.\n\n   NODE-ID  DRAINING  FINISHED  ERRORS  PARTITIONS  ELIGIBLE  TRANSFERRING  FAILED\n   1        false     false     false   0           0         0             0\n\nField descriptions:\n\n        NODE-ID: the node ID\n       DRAINING: true if the node is actively draining leadership\n       FINISHED: leadership draining has completed\n         ERRORS: errors have been encountered while draining\n     PARTITIONS: number of partitions whose leadership has moved\n       ELIGIBLE: number of partitions with leadership eligible to move\n   TRANSFERRING: current active number of leadership transfers\n         FAILED: number of failed leadership transfers\n\nNotes:\n\n   - When errors are present further information will be available in the logs\n     for the corresponding node.\n\n   - Only partitions with more than one replica are eligible for leadership\n     transfer.",
        "usage": "Usage:\n  rpk cluster maintenance status [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for status."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster metadata": {
        "description": "Request broker metadata.\n\nThe Kafka protocol's metadata contains information about brokers, topics, and\nthe cluster as a whole.\n\nThis command only runs if specific sections of metadata are requested. There\nare currently three sections: the cluster, the list of brokers, and the topics.\nIf no section is specified, this defaults to printing all sections.\n\nIf the topic section is requested, all topics are requested by default unless\nsome are manually specified as arguments. Expanded per-partition information\ncan be printed with the -d flag, and internal topics can be printed with the -i\nflag.\n\nIn the broker section, the controller node is suffixed with *.",
        "usage": "Usage:\n  rpk cluster metadata [flags]\n\nAliases:\n  metadata, status, info",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for metadata."
            },
            "-b, --print-brokers": {
                "type": "-",
                "description": "Print brokers section."
            },
            "-c, --print-cluster": {
                "type": "-",
                "description": "Print cluster section."
            },
            "-d, --print-detailed-topics": {
                "type": "-",
                "description": "Print per-partition information for topics (implies -t)."
            },
            "-i, --print-internal-topics": {
                "type": "-",
                "description": "Print internal topics (if all topics requested, implies -t)."
            },
            "-t, --print-topics": {
                "type": "-",
                "description": "Print topics section (implied if any topics are specified)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster partitions": {
        "description": "Manage cluster partitions",
        "usage": "Usage:\n  rpk cluster partitions [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for partitions."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster partitions balancer-status": {
        "description": "Queries cluster for partition balancer status:\n\nIf continuous partition balancing is enabled, redpanda will continuously\nreassign partitions from both unavailable nodes and from nodes using more disk\nspace than the configured limit.\n\nThis command can be used to monitor the partition balancer status.\n\nFIELDS\n\n    Status:                        Either off, ready, starting, in progress, or\n                                   stalled.\n    Seconds Since Last Tick:       The last time the partition balancer ran.\n    Current Reassignments Count:   Current number of partition reassignments in\n                                   progress.\n    Unavailable Nodes:             The nodes that have been unavailable after a\n                                   time set by the\n                                   \"partition_autobalancing_node_availability_timeout_sec\"\n                                   cluster property.\n    Over Disk Limit Nodes:         The nodes that surpassed the threshold of\n                                   used disk percentage specified in the\n                                   \"partition_autobalancing_max_disk_usage_percent\"\n                                   cluster property.\n\nBALANCER STATUS\n\n    off:          The balancer is disabled.\n    ready:        The balancer is active but there is nothing to do.\n    starting:     The balancer is starting but has not run yet.\n    in_progress:  The balancer is active and is in the process of scheduling\n                  partition movements.\n    stalled:      Violations have been detected and the balancer cannot correct\n                  them.\n\nSTALLED BALANCER\n\nA stalled balancer can occur for a few reasons and requires a bit of manual\ninvestigation. A few areas to investigate:\n\n* Are there are enough healthy nodes to which to move partitions? For example,\n  in a three node cluster, no movements are possible for partitions with three\n  replicas. You will see a stall every time there is a violation.\n\n* Does the cluster have sufficient space? If all nodes in the cluster are\n  utilizing more than 80% of their disk space, rebalancing cannot proceed.\n\n* Do all partitions have quorum? If the majority of a partition's replicas are\n  down, the partition cannot be moved.\n\n* Are any nodes in maintenance mode? Partitions are not moved if any node is in\n  maintenance mode.",
        "usage": "Usage:\n  rpk cluster partitions balancer-status [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for balancer-status."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster partitions movement-cancel": {
        "description": "Cancel ongoing partition movements.\n\nBy default, this command cancels all the partition movements in the cluster. \nTo ensure that you do not accidentally cancel all partition movements, this \ncommand prompts users for confirmation before issuing the cancellation request. \nYou can use \"--no-confirm\" to disable the confirmation prompt:\n\n    rpk cluster partitions movement-cancel --no-confirm\n\nIf \"--node\" is set, this command will only stop the partition movements \noccurring in the specified node:\n\n    rpk cluster partitions movement-cancel --node 1",
        "usage": "Usage:\n  rpk cluster partitions movement-cancel [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for movement-cancel."
            },
            "--no-confirm": {
                "type": "-",
                "description": "Disable confirmation prompt."
            },
            "--node": {
                "type": "int",
                "description": "ID of a specific node on which to cancel ongoing partition movements (default -1)."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster self-test": {
        "description": "Start, stop and query runs of Redpanda self-test through the Admin API listener",
        "usage": "Usage:\n  rpk cluster self-test [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of Admin API addresses (<IP>:<port>)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for self-test."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster self-test start": {
        "description": "Starts one or more benchmark tests on one or more nodes\nof the cluster. Available tests to run:\n\n* Disk tests:\n  * Throughput test: 512 KB messages, sequential read/write\n    * Uses a larger request message sizes and deeper I/O queue depth to write/read more bytes in a shorter amount of time, at the cost of IOPS/latency.\n  * Latency test: 4 KB messages, sequential read/write\n    * Uses smaller request message sizes and lower levels of parallelism to achieve higher IOPS and lower latency.\n\n* Network tests:\n  * Throughput test: 8192-bit messages\n    * Unique pairs of Redpanda nodes each act as a client and a server.\n    * The test pushes as much data over the wire, within the test parameters.\n\nThis command immediately returns on success, and the tests run asynchronously. The\nuser polls for results with the 'self-test status'\ncommand.",
        "usage": "Usage:\n  rpk cluster self-test start [flags]",
        "flags": {
            "--disk-duration-ms": {
                "type": "duration",
                "description": "uint       The  in milliseconds of individual disk test runs (default 30000)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for start."
            },
            "--network-duration-ms": {
                "type": "duration",
                "description": "uint    The  in milliseconds of individual network test runs (default 30000)."
            },
            "--no-confirm": {
                "type": "-",
                "description": "Acknowledge warning prompt skipping read from stdin."
            },
            "--only-disk-test": {
                "type": "-",
                "description": "Runs only the disk benchmarks."
            },
            "--only-network-test": {
                "type": "-",
                "description": "Runs only network benchmarks."
            },
            "--participant-node-ids": {
                "type": "-",
                "description": "ints   IDs of nodes that the tests will run on. If not set, tests will run for all node IDs."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of Admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster self-test status": {
        "description": "Returns the status of the currently running or last completed self-test run.\n\nUse this command after invoking 'self-test start' to determine the status of\nthe jobs launched. Possible results are:\n\n* One or more jobs still running\n  * Returns the IDs of Redpanda nodes still running self-tests.\n\n* No jobs running:\n  * Returns cached results for all nodes of the last completed test.",
        "usage": "Usage:\n  rpk cluster self-test status [flags]",
        "flags": {
            "--format": {
                "type": "string",
                "description": "Output format (text, json) (default \"text\")."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for status."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of Admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster self-test stop": {
        "description": "Stops all self-test tests.\n\nThis command stops all currently running self-tests. The command is synchronous and returns\nsuccess when all jobs have been stopped or reports errors if broker timeouts have expired.",
        "usage": "Usage:\n  rpk cluster self-test stop [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for stop."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of Admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster storage": {
        "description": "Manage the cluster storage",
        "usage": "Usage:\n  rpk cluster storage [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for storage."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster storage recovery": {
        "description": "Interact with the topic recovery process.\n\t\t\nThis command is used to restore topics from the archival bucket, which can be \nuseful for disaster recovery or if a topic was accidentally deleted.\n\nTo begin the recovery process, use the \"recovery start\" command. Note that this \nprocess can take a while to complete, so the command will exit after starting \nit. If you want the command to wait for the process to finish, use the \"--wait\"\nor \"-w\" flag.\n\nYou can check the status of the recovery process with the \"recovery status\" \ncommand after it has been started.",
        "usage": "Usage:\n  rpk cluster storage recovery [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for recovery."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster storage recovery start": {
        "description": "Start the topic recovery process.\n\t\t\nThis command starts the process of restoring topics from the archival bucket.\nIf the wait flag (--wait/-w) is set, the command will poll the status of the\nrecovery process until it's finished.",
        "usage": "Usage:\n  rpk cluster storage recovery start [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for start."
            },
            "--polling-interval": {
                "type": "duration",
                "description": "The status check interval (e.g. '30s', '1.5m'); ignored if --wait is not used (default 5s)."
            },
            "--topic-name-pattern": {
                "type": "string",
                "description": "A regex pattern that restores any matching topics (default \".*\")."
            },
            "-w, --wait": {
                "type": "-",
                "description": "Wait until auto-restore is complete."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk cluster storage recovery status": {
        "description": "Fetch the status of the topic recovery process.\n\t\t\nThis command fetches the status of the process of restoring topics from the \narchival bucket.",
        "usage": "Usage:\n  rpk cluster storage recovery status [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for status."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk container": {
        "description": "Manage a local container cluster",
        "usage": "Usage:\n  rpk container [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for container."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk container purge": {
        "description": "Stop and remove an existing local container cluster's data",
        "usage": "Usage:\n  rpk container purge [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for purge."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk container start": {
        "description": "Start a local container cluster",
        "usage": "Usage:\n  rpk container start [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for start."
            },
            "-n, --nodes": {
                "type": "-",
                "description": "uint     The number of nodes to start (default 1)."
            },
            "--retries": {
                "type": "-",
                "description": "uint   The amount of times to check for the cluster before considering it unstable and exiting. (default 10)."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk container status": {
        "description": "Get status",
        "usage": "Usage:\n  rpk container status [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for status."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk container stop": {
        "description": "Stop an existing local container cluster",
        "usage": "Usage:\n  rpk container stop [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for stop."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk debug": {
        "description": "Debug the local Redpanda process",
        "usage": "Usage:\n  rpk debug [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for debug."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk debug bundle": {
        "description": "'rpk debug bundle' collects environment data that can help debug and diagnose\nissues with a redpanda cluster, a broker, or the machine it's running on. It\nthen bundles the collected data into a ZIP file, called a diagnostics bundle.\n\nThe files and directories in the diagnostics bundle differ depending on the \nenvironment in which Redpanda is running:\n\nCOMMON FILES\n\n - Kafka metadata: Broker configs, topic configs, start/committed/end offsets,\n   groups, group commits.\n\n - Controller logs: The controller logs directory up to a limit set by\n   --controller-logs-size-limit flag\n\n - Data directory structure: A file describing the data directory's contents.\n\n - redpanda configuration: The redpanda configuration file (redpanda.yaml;\n   SASL credentials are stripped).\n\n - /proc/cpuinfo: CPU information like make, core count, cache, frequency.\n\n - /proc/interrupts: IRQ distribution across CPU cores.\n\n - Resource usage data: CPU usage percentage, free memory available for the\n   redpanda process.\n\n - Clock drift: The ntp clock delta (using pool.ntp.org as a reference) & round\n   trip time.\n\n - Admin API calls: Cluster and broker configurations, cluster health data, and \n   license key information.\n\n - Broker metrics: The broker's Prometheus metrics, fetched through its\n   admin API (/metrics and /public_metrics).\n\nBARE-METAL\n\n - Kernel logs: The kernel logs ring buffer (syslog).\n\n - DNS: The DNS info as reported by 'dig', using the hosts in\n   /etc/resolv.conf.\n\n - Disk usage: The disk usage for the data directory, as output by 'du'.\n\n - redpanda logs: The node's redpanda logs written to journald. If --logs-since \n   or --logs-until are passed, then only the logs within the resulting time frame\n   will be included.\n\n - Socket info: The active sockets data output by 'ss'.\n\n - Running process info: As reported by 'top'.\n\n - Virtual memory stats: As reported by 'vmstat'.\n\n - Network config: As reported by 'ip addr'.\n\n - lspci: List the PCI buses and the devices connected to them.\n\n - dmidecode: The DMI table contents. Only included if this command is run\n   as root.\n\nKUBERNETES\n\n - Kubernetes Resources: Kubernetes manifests for all resources in the given \n   Kubernetes namespace (via --namespace).\n\n - redpanda logs: Logs of each Pod in the the given Kubernetes namespace. If \n   --logs-since is passed, only the logs within the given timeframe are \n   included.\n\n\nIf you have an upload URL from the Redpanda support team, provide it in the \n--upload-url flag to upload your diagnostics bundle to Redpanda.",
        "usage": "Usage:\n  rpk debug bundle [flags]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--api-urls": {
                "type": "string",
                "description": "Comma-separated list of admin API addresses (<IP>:<port>)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--controller-logs-size-limit": {
                "type": "string",
                "description": "Sets the limit of the controller log size that can be stored in the bundle. Multipliers are also supported, e.g. 3MB, 1GiB (default \"20MB\")."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for bundle."
            },
            "--logs-since": {
                "type": "string",
                "description": "Include log entries on or newer than the specified date. (journalctl date format, e.g. YYYY-MM-DD)."
            },
            "--logs-size-limit": {
                "type": "string",
                "description": "Read the logs until the given size is reached. Multipliers are also supported, e.g. 3MB, 1GiB (default \"100MiB\")."
            },
            "--logs-until": {
                "type": "string",
                "description": "Include log entries on or older than the specified date. (journalctl date format, e.g. YYYY-MM-DD)."
            },
            "--metrics-interval": {
                "type": "duration",
                "description": "Interval between metrics snapshots (e.g. '30s', '1.5m') (default 10s)."
            },
            "-n, --namespace": {
                "type": "string",
                "description": "The namespace to use to collect the resources from (k8s only) (default \"redpanda\")."
            },
            "-o, --output": {
                "type": "string",
                "description": "The file path where the debug file will be written (default ./<timestamp>-bundle.zip)."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--timeout": {
                "type": "duration",
                "description": "How long to wait for child commands to execute (e.g. '30s', '1.5m') (default 12s)."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--upload-url": {
                "type": "string",
                "description": "If provided, rpk will upload the bundle to the given URL in addition to creating a copy on disk."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk generate": {
        "description": "Generate a configuration template for related services",
        "usage": "Usage:\n  rpk generate [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for generate."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk generate grafana-dashboard": {
        "description": "Generate a Grafana dashboard for redpanda metrics",
        "usage": "Usage:\n  rpk generate grafana-dashboard [flags]",
        "flags": {
            "--datasource": {
                "type": "string",
                "description": "The name of the Prometheus datasource as configured in your grafana instance."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for grafana-dashboard."
            },
            "--job-name": {
                "type": "string",
                "description": "The prometheus job name by which to identify the redpanda nodes (default \"redpanda\")."
            },
            "--metrics-endpoint": {
                "type": "string",
                "description": "The redpanda metrics endpoint where to get the metrics metadata. i.e. redpanda_host:9644/metrics (default \"http://localhost:9644/metrics\")."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk generate prometheus-config": {
        "description": "Generate the Prometheus configuration to scrape redpanda nodes. This command's\noutput should be added to the 'scrape_configs' array in your Prometheus\ninstance's YAML config file.\n\nIf --seed-addr is passed, it will be used to discover the rest of the cluster\nhosts via Redpanda's Kafka API. If --node-addrs is passed, they will be used\ndirectly. Otherwise, 'rpk generate prometheus-conf' will read the redpanda\nconfig file and use the node IP configured there. --config may be passed to\nspecify an arbitrary config file.\n\nIf the node you want to scrape uses TLS, you can provide the TLS flags:\n--tls-key, --tls-cert, and --tls-truststore and rpk will generate the required\ntls_config section in the scrape configuration.",
        "usage": "Usage:\n  rpk generate prometheus-config [flags]",
        "flags": {
            "--config": {
                "type": "string",
                "description": "The path to the redpanda config file."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for prometheus-config."
            },
            "--internal-metrics": {
                "type": "-",
                "description": "Include scrape config for internal metrics (/metrics)."
            },
            "--job-name": {
                "type": "string",
                "description": "The prometheus job name by which to identify the redpanda nodes (default \"redpanda\")."
            },
            "--node-addrs": {
                "type": "strings",
                "description": "A comma-delimited list of the addresses (<host>:<port>) of all the redpanda nodes in a cluster. The port must be the one configured for the nodes' admin API (9644 by default)."
            },
            "--seed-addr": {
                "type": "string",
                "description": "The URL of a redpanda node with which to discover the rest."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk generate shell-completion": {
        "description": "Shell completion can help autocomplete rpk commands when you press tab.\n\n# Bash\n\nBash autocompletion relies on the bash-completion package. You can test if you\nhave this by running \"type _init_completion\", if you do not, you can install\nthe package through your package manager.\n\nIf you have bash-completion installed, and the command still fails, you likely\nneed to add the following line to your ~/.bashrc:\n\n    source /usr/share/bash-completion/bash_completion\n\nTo ensure autocompletion of rpk exists in all shell sessions, add the following\nto your ~/.bashrc:\n\n    command -v rpk >/dev/null && . <(rpk generate shell-completion bash)\n\nAlternatively, to globally enable rpk completion, you can run the following:\n\n    rpk generate shell-completion bash > /etc/bash_completion.d/rpk\n\n# Zsh\n\nTo enable autocompletion in any zsh session for any user, run this once:\n\n    rpk generate shell-completion zsh > \"${fpath[1]}/_rpk\"\n\nYou can also place that command in your ~/.zshrc to ensure that when you update\nrpk, you update autocompletion. If you initially require sudo to edit that\nfile, you can chmod it to be world writeable, after which you will always be\nable to update it from ~/.zshrc.\n\nIf shell completion is not already enabled in your zsh environment, also\nadd the following to your ~/.zshrc:\n\n    autoload -U compinit; compinit\n\n# Fish\n\nTo enable autocompletion in any fish session, run:\n\n    rpk generate shell-completion fish > ~/.config/fish/completions/rpk.fish",
        "usage": "Usage:\n  rpk generate shell-completion [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for shell-completion."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group": {
        "description": "Describe, list, and delete consumer groups and manage their offsets.\n\nConsumer groups allow you to horizontally scale consuming from topics. A\nnon-group consumer consumes all records from all partitions you assign it. In\ncontrast, consumer groups allow many consumers to coordinate and divide work.\nIf you have two members in a group consuming topics A and B, each with three\npartitions, then both members consume three partitions. If you add another\nmember to the group, then each of the three members will consume two\npartitions. This allows you to horizontally scale consuming of topics.\n\nThe unit of scaling is a single partition. If you add more consumers to a group\nthan there are are total partitions to consume, then some consumers will be\nidle. More commonly, you have many more partitions than consumer group members\nand each member consumes a chunk of available partitions. One scenario where\nyou may want more members than partitions is if you want active standby's to\ntake over load immediately if any consuming member dies.\n\nHow group members divide work is entirely client driven (the \"partition\nassignment strategy\" or \"balancer\" depending on the client). Brokers know\nnothing about how consumers are assigning partitions. A broker's role in group\nconsuming is to choose which member is the leader of a group, forward that\nmember's assignment to every other member, and ensure all members are alive\nthrough heartbeats.\n\nConsumers periodically commit their progress when consuming partitions. Through\nthese commits, you can monitor just how far behind a consumer is from the\nlatest messages in a partition. This is called \"lag\". Large lag implies that\nthe client is having problems, which could be from the server being too slow,\nor the client being oversubscribed in the number of partitions it is consuming,\nor the server being in a bad state that requires restarting or removing from\nthe server pool, and so on.\n\nYou can manually manage offsets for a group, which allows you to rewind or\nforward commits. If you notice that a recent deploy of your consumers had a\nbug, you may want to stop all members, rewind the commits to before the latest\ndeploy, and restart the members with a patch.\n\nThis command allows you to list all groups, describe a group (to view the\nmembers and their lag), and manage offsets.",
        "usage": "Usage:\n  rpk group [command]\n\nAliases:\n  group, g",
        "flags": {
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for group."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group delete": {
        "description": "Delete groups from brokers.\n\nOlder versions of the Kafka protocol included a retention_millis field in\noffset commit requests. Group commits persisted for this retention and then\neventually expired. Once all commits for a group expired, the group would be\nconsidered deleted.\n\nThe retention field was removed because it proved problematic for infrequently\ncommitting consumers: the offsets could be expired for a group that was still\nactive. If clients use new enough versions of OffsetCommit (versions that have\nremoved the retention field), brokers expire offsets only when the group is\nempty for offset.retention.minutes. Redpanda does not currently support that\nconfiguration (see #2904), meaning offsets for empty groups expire only when\nthey are explicitly deleted.\n\nYou may want to delete groups to clean up offsets sooner than when they\nautomatically are cleaned up, such as when you create temporary groups for\nquick investigation or testing. This command helps you do that.",
        "usage": "Usage:\n  rpk group delete [GROUPS...] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for delete."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group describe": {
        "description": "Describe group offset status & lag.\n\nThis command describes group members, calculates their lag, and prints detailed\ninformation about the members.",
        "usage": "Usage:\n  rpk group describe [GROUPS...] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for describe."
            },
            "-s, --print-summary": {
                "type": "-",
                "description": "Print only the group summary section."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group list": {
        "description": "List all groups.\n\nThis command lists all groups currently known to Redpanda, including empty\ngroups that have not yet expired. The BROKER column is which broker node is the\ncoordinator for the group. This command can be used to track down unknown\ngroups, or to list groups that need to be cleaned up.",
        "usage": "Usage:\n  rpk group list [flags]\n\nAliases:\n  list, ls",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group offset-delete": {
        "description": "Forcefully delete offsets for a kafka group.\n\nThe broker will only allow the request to succeed if the group is in a dead\nstate (no subscriptions) or there are no subscriptions for offsets for\ntopic/partitions requested to be deleted.\n\nUse either the --from-file or the --topic option. They are mututally exclusive.\nTo indicate which topics or topic partitions you'd like to remove offsets from use\nthe --topic (-t) flag, followed by a comma separated list of partition ids. Supplying\nno list will delete all offsets for all partitions for a given topic.\n\nYou may also provide a text file to indicate topic/partition tuples. Use the\n--from-file flag for this option. The file must contain lines of topic/partitions\nseparated by a tab or space. Example:\n\ntopic_a 0\ntopic_a 1\ntopic_b 0",
        "usage": "Usage:\n  rpk group offset-delete [GROUP] --from-file FILE --topic foo:0,1,2 [flags]",
        "flags": {
            "-f, --from-file": {
                "type": "string",
                "description": "File of topic/partition tuples for which to delete offsets for."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for offset-delete."
            },
            "-t, --topic": {
                "type": "stringArray",
                "description": "topic:partition_id (repeatable; e.g. -t foo:0,1,2 )."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk group seek": {
        "description": "Modify a group's current offsets.\n\nThis command allows you to modify a group's offsets. Sometimes, you may need to\nrewind a group if you had a mistaken deploy, or fast-forward a group if it is\nfalling behind on messages that can be skipped.\n\nThe --to option allows you to seek to the start of partitions, end of\npartitions, or after a specific timestamp. The default is to seek any topic\npreviously committed. Using --topics allows to you set commits for only the\nspecified topics; all other commits will remain untouched. Topics with no\ncommits will not be committed unless allowed with --allow-new-topics.\n\nThe --to-group option allows you to seek to commits that are in another group.\nThis is a merging operation: if g1 is consuming topics A and B, and g2 is\nconsuming only topic B, \"rpk group seek g1 --to-group g2\" will update g1's\ncommits for topic B only. The --topics flag can be used to further narrow which\ntopics are updated. Unlike --to, all non-filtered topics are committed, even\ntopics not yet being consumed, meaning --allow-new-topics is not needed.\n\nThe --to-file option allows to seek to offsets specified in a text file with\nthe following format:\n    [TOPIC] [PARTITION] [OFFSET]\n    [TOPIC] [PARTITION] [OFFSET]\n    ...\nEach line contains the topic, the partition, and the offset to seek to. As with\nthe prior options, --topics allows filtering which topics are updated. Similar\nto --to-group, all non-filtered topics are committed, even topics not yet being\nconsumed, meaning --allow-new-topics is not needed.\n\nThe --to, --to-group, and --to-file options are mutually exclusive. If you are\nnot authorized to describe or read some topics used in a group, you will not be\nable to modify offsets for those topics.\n\nEXAMPLES\n\nSeek group G to June 1st, 2021:\n    rpk group seek g --to 1622505600\n    or, rpk group seek g --to 1622505600000\n    or, rpk group seek g --to 1622505600000000000\nSeek group X to the commits of group Y topic foo:\n    rpk group seek X --to-group Y --topics foo\nSeek group G's topics foo, bar, and biz to the end:\n    rpk group seek G --to end --topics foo,bar,biz\nSeek group G to the beginning of a topic it was not previously consuming:\n    rpk group seek G --to start --topics foo --allow-new-topics",
        "usage": "Usage:\n  rpk group seek [GROUP] --to (start|end|timestamp) --to-group ... --topics ... [flags]",
        "flags": {
            "--allow-new-topics": {
                "type": "-",
                "description": "Allow seeking to new topics not currently consumed (implied with --to-group or --to-file)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for seek."
            },
            "--to": {
                "type": "string",
                "description": "Where to seek (start, end, unix second | millisecond | nanosecond)."
            },
            "--to-file": {
                "type": "string",
                "description": "Seek to offsets as specified in the file."
            },
            "--to-group": {
                "type": "string",
                "description": "Seek to the commits of another group."
            },
            "--topics": {
                "type": "strings",
                "description": "Only seek these topics, if any are specified."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk help": {
        "description": "Help provides help for any command in the application.\nSimply type rpk help [path to command] for full details.",
        "usage": "Usage:\n  rpk help [command] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "help for help."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk plugin": {
        "description": "List, download, update, and remove rpk plugins.\n\t\nPlugins augment rpk with new commands.\n\nFor a plugin to be used, it must be in $HOME/.local/bin or somewhere \ndiscoverable by rpk in your $PATH. All plugins follow a defined naming scheme:\n\n  .rpk-<name>\n  .rpk.ac-<name>\n\nAll plugins are prefixed with either .rpk- or .rpk.ac-. When rpk starts up, it\nsearches all directories in your $PATH for any executable binary that begins\nwith either of those prefixes. For any binary it finds, rpk adds a command for\nthat name to the rpk command space itself.\n\nNo plugin name can shadow an existing rpk command, and only one plugin can\nexist under a given name at once. Plugins are added to the rpk command space on\na first-seen basis. If you have two plugins rpk-foo, and the second is\ndiscovered later on in the $PATH directories, then only the first will be used.\nThe second will be ignored.\n\nPlugins that have an .rpk.ac- prefix indicate that they support the\n--help-autocomplete flag. If rpk sees this, rpk will exec the plugin with that\nflag when rpk starts up, and the plugin will return all commands it supports as\nwell as short and long help test for each command. Rpk uses this return to\nbuild a shadow command space within rpk itself so that it looks as if the\nplugin exists within rpk. This is particularly useful if you enable\nautocompletion.\n\nThe expected return for plugins from --help-autocomplete is an array of the\nfollowing:\n\n  type pluginHelp struct {\n          Path    string   `json:\"path,omitempty\"`\n          Short   string   `json:\"short,omitempty\"`\n          Long    string   `json:\"long,omitempty\"`\n          Example string   `json:\"example,omitempty\"`\n          Args    []string `json:\"args,omitempty\"`\n  }\n\nwhere \"path\" is an underscore delimited argument path to a command. For\nexample, \"foo_bar_baz\" corresponds to the command \"rpk foo bar baz\".",
        "usage": "Usage:\n  rpk plugin [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for plugin."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk plugin install": {
        "description": "Install an rpk plugin.\n\nAn rpk plugin must be saved in $HOME/.local/bin or in a directory that is in \nyour $PATH. By default, this command installs plugins to $HOME/.local/bin. This \ncan be overridden by specifying the --dir flag.\n\nIf --dir is not present, rpk will create $HOME/.local/bin if it does not exist.",
        "usage": "Usage:\n  rpk plugin install [PLUGIN] [flags]\n\nAliases:\n  install, download",
        "flags": {
            "--dir": {
                "type": "string",
                "description": "Destination directory to save the installed plugin (defaults to $HOME/.local/bin) (default \"/Users/edward/.local/bin\")."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for install."
            },
            "-u, --update": {
                "type": "-",
                "description": "Update a locally installed plugin if it differs from the current remote version."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk plugin list": {
        "description": "List all available plugins.\n\nBy default, this command fetches the remote manifest and prints plugins\navailable for download. Any plugin that is already downloaded is prefixed with\nan asterisk. If a locally installed plugin has a different sha256sum as the one\nspecified in the manifest, or if the sha256sum could not be calculated for the\nlocal plugin, an additional message is printed.\n\nYou can specify --local to print all locally installed plugins, as well as\nwhether you have \"shadowed\" plugins (the same plugin specified multiple times).",
        "usage": "Usage:\n  rpk plugin list [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "-l, --local": {
                "type": "-",
                "description": "List locally installed plugins and shadowed plugins."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk plugin uninstall": {
        "description": "Uninstall / remove an existing local plugin.\n\nThis command lists locally installed plugins and removes the first plugin that\nmatches the requested removal. If --include-shadowed is specified, this command\nalso removes all shadowed plugins of the same name. To remove a command under a\nnested namespace (\"rpk foo bar\"), you can use \"foo_bar\".",
        "usage": "Usage:\n  rpk plugin uninstall [NAME] [flags]\n\nAliases:\n  uninstall, rm",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for uninstall."
            },
            "--include-shadowed": {
                "type": "-",
                "description": "Also remove shadowed plugins that have the same name."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda": {
        "description": "Interact with a local or remote Redpanda process",
        "usage": "Usage:\n  rpk redpanda [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for redpanda."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin": {
        "description": "Talk to the Redpanda admin listener",
        "usage": "Usage:\n  rpk redpanda admin [command]",
        "flags": {
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for admin."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin brokers": {
        "description": "View and configure Redpanda brokers through the admin listener",
        "usage": "Usage:\n  rpk redpanda admin brokers [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for brokers."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin brokers decommission": {
        "description": "Decommission the given broker.\n\nDecommissioning a broker removes it from the cluster.\n\nA decommission request is sent to every broker in the cluster, only the cluster\nleader handles the request.\n\nFor safety on v22.x clusters, this command will not run if the requested \nbroker is in maintenance mode. As of v23.x, Redpanda supports \ndecommissioning a node that is currently in maintenance mode. If you are on \na v22.x cluster and need to bypass the maintenance mode check (perhaps your \ncluster is unreachable), use the hidden --force flag.",
        "usage": "Usage:\n  rpk redpanda admin brokers decommission [BROKER ID] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for decommission."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin brokers decommission-status": {
        "description": "Show the progress of a node decommissioning",
        "usage": "Usage:\n  rpk redpanda admin brokers decommission-status [BROKER ID] [flags]",
        "flags": {
            "-d, --detailed": {
                "type": "-",
                "description": "Print how much data moved and remaining in bytes."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for decommission-status."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin brokers list": {
        "description": "List the brokers in your cluster",
        "usage": "Usage:\n  rpk redpanda admin brokers list [flags]\n\nAliases:\n  list, ls",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin brokers recommission": {
        "description": "Recommission the given broker if is is still decommissioning.\n\nRecommissioning can stop an active decommission.\n\nOnce a broker is decommissioned, it cannot be recommissioned through this\ncommand.\n\nA recommission request is sent to every broker in the cluster, only\nthe cluster leader handles the request.",
        "usage": "Usage:\n  rpk redpanda admin brokers recommission [BROKER ID] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for recommission."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin config": {
        "description": "View or modify Redpanda configuration through the admin listener",
        "usage": "Usage:\n  rpk redpanda admin config [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for config."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin config log-level": {
        "description": "Manage a broker's log level",
        "usage": "Usage:\n  rpk redpanda admin config log-level [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for log-level."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin config log-level set": {
        "description": "Set broker logger's log level.\n\nThis command temporarily changes a broker logger's log level. Each Redpanda\nbroker has many loggers, and each can be individually changed. Any change\nto a logger persists for a limited amount of time, so as to ensure you do\nnot accidentally enable debug logging permanently.\n\nIt is optional to specify a logger; if you do not, this command will prompt\nfrom the set of available loggers.\n\nThe special logger \"all\" enables all loggers. Alternatively, you can specify\nmany loggers at once. To see all possible loggers, run the following command:\n\n  redpanda --help-loggers\n\nThis command accepts loggers that it does not know of to ensure you can\nindependently update your redpanda installations from rpk. The success or\nfailure of enabling each logger is individually printed.",
        "usage": "Usage:\n  rpk redpanda admin config log-level set [LOGGERS...] [flags]",
        "flags": {
            "-e, --expiry-seconds": {
                "type": "int",
                "description": "seconds to persist this log level override before redpanda reverts to its previous settings (if 0, persist until shutdown) (default 300)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for set."
            },
            "--host": {
                "type": "string",
                "description": "either a hostname or an index into rpk.admin_api.addresses config section to select the hosts to issue the request to."
            },
            "-l, --level": {
                "type": "string",
                "description": "log level to set (error, warn, info, debug, trace) (default \"debug\")."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin config print": {
        "description": "Display the current Redpanda configuration",
        "usage": "Usage:\n  rpk redpanda admin config print [flags]\n\nAliases:\n  print, dump, list, ls, display",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for print."
            },
            "--host": {
                "type": "string",
                "description": "either a hostname or an index into rpk.admin_api.addresses config section to select the hosts to issue the request to."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin partitions": {
        "description": "View and configure Redpanda partitions through the admin listener",
        "usage": "Usage:\n  rpk redpanda admin partitions [command]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for partitions."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk redpanda admin partitions list": {
        "description": "List the partitions in a broker in the cluster",
        "usage": "Usage:\n  rpk redpanda admin partitions list [BROKER ID] [flags]\n\nAliases:\n  list, ls",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "-l, --leader-only": {
                "type": "-",
                "description": "print the partitions on broker which are leaders."
            },
            "--admin-api-tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Admin API (not necessary if specifying custom certs)."
            },
            "--admin-api-tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the Admin API."
            },
            "--admin-api-tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the Admin API."
            },
            "--config": {
                "type": "string",
                "description": "rpk config file, if not set the file will be searched for in the default locations."
            },
            "--hosts": {
                "type": "strings",
                "description": "A comma-separated list of Admin API addresses (<IP>:<port>). You must specify one for each node."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic": {
        "description": "Create, delete, produce to and consume from Redpanda topics",
        "usage": "Usage:\n  rpk topic [command]",
        "flags": {
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for topic."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic add-partitions": {
        "description": "Add partitions to existing topics.",
        "usage": "Usage:\n  rpk topic add-partitions [TOPICS...] --num [#] [flags]",
        "flags": {
            "-f, --force": {
                "type": "-",
                "description": "Force change the partition count in internal topics, e.g. __consumer_offsets."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for add-partitions."
            },
            "-n, --num": {
                "type": "int",
                "description": "Number of partitions to add to each topic."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic alter-config": {
        "description": "Set, delete, add, and remove key/value configs for a topic.\n\nThis command allows you to incrementally alter the configuration for multiple\ntopics at a time.\n\nIncremental altering supports four operations:\n\n  1) Setting a key=value pair\n  2) Deleting a key's value\n  3) Appending a new value to a list-of-values key\n  4) Subtracting (removing) an existing value from a list-of-values key\n\nThe --dry option will validate whether the requested configuration change is\nvalid, but does not apply it.",
        "usage": "Usage:\n  rpk topic alter-config [TOPICS...] --set key=value --delete key2,key3 [flags]",
        "flags": {
            "--append": {
                "type": "stringArray",
                "description": "key=value; Value to append to a list-of-values key (repeatable)."
            },
            "-d, --delete": {
                "type": "stringArray",
                "description": "Key to delete (repeatable)."
            },
            "--dry": {
                "type": "-",
                "description": "Dry run: validate the alter request, but do not apply."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for alter-config."
            },
            "-s, --set": {
                "type": "stringArray",
                "description": "key=value; Pair to set (repeatable)."
            },
            "--subtract": {
                "type": "stringArray",
                "description": "key=value; Value to remove from list-of-values key (repeatable)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic consume": {
        "description": "Consume records from topics.\n\nConsuming records reads from any amount of input topics, formats each record\naccording to --format, and prints them to STDOUT. The output formatter\nunderstands a wide variety of formats.\n\nThe default output format \"--format json\" is a special format that outputs each\nrecord as JSON. There may be more single-word-no-escapes formats added later.\nOutside of these special formats, formatting follows the rules described below.\n\nFormatting output is based on percent escapes and modifiers. Slashes can be\nused for common escapes:\n\n    \\t \\n \\r \\\\ \\xNN\n\nprints tabs, newlines, carriage returns, slashes, or hex encoded characters.p\n\nPercent encoding prints record fields, fetch partition fields, or extra values:\n\n    %t    topic\n    %T    topic length\n    %k    key\n    %K    key length\n    %v    value\n    %V    value length\n    %h    begin the header specification\n    %H    number of headers\n    %p    partition\n    %o    offset\n    %e    leader epoch\n    %d    timestamp (formatting described below)\n    %a    record attributes (formatting described below)\n    %x    producer id\n    %y    producer epoch\n\n    %[    partition log start offset\n    %|    partition last stable offset\n    %]    partition high watermark\n\n    %%    percent sign\n    %{    left brace\n    %}    right brace\n\n    %i    the number of records formatted\n\nMODIFIERS\n\nText and numbers can be formatted in many different ways, and the default\nformat can be changed within brace modifiers. %v prints a value, while %v{hex}\nprints the value hex encoded. %T prints the length of a topic in ascii, while\n%T{big8} prints the length of the topic as an eight byte big endian.\n\nAll modifiers go within braces following a percent-escape.\n\nNUMBERS\n\nFormatting number values can have the following modifiers:\n\n     ascii       print the number as ascii (default)\n\n     hex64       sixteen hex characters\n     hex32       eight hex characters\n     hex16       four hex characters\n     hex8        two hex characters\n     hex4        one hex character\n\n     big64       eight byte big endian number\n     big32       four byte big endian number\n     big16       two byte big endian number\n     big8        alias for byte\n\n     little64    eight byte little endian number\n     little32    four byte little endian number\n     little16    two byte little endian number\n     little8     alias for byte\n\n     byte        one byte number\n     bool        \"true\" if the number is non-zero, \"false\" if the number is zero\n\nAll numbers are truncated as necessary per the modifier. Printing %V{byte} for\na length 256 value will print a single null, whereas printing %V{big8} would\nprint the bytes 1 and 0.\n\nWhen writing number sizes, the size corresponds to the size of the raw values,\nnot the size of encoded values. \"%T% t{hex}\" for the topic \"foo\" will print\n\"3 666f6f\", not \"6 666f6f\".\n\nTIMESTAMPS\n\nBy default, the timestamp field is printed as a millisecond number value. In\naddition to the number modifiers above, timestamps can be printed with either\nGo formatting or strftime formatting:\n\n    %d{go[2006-01-02T15:04:05Z07:00]}\n    %d{strftime[%F]}\n\nAn arbitrary amount of brackets (or braces, or # symbols) can wrap your date\nformatting:\n\n    %d{strftime### [%F] ###}\n\nThe above will print \" [YYYY-MM-DD] \", while the surrounding three # on each\nside are used to wrap the formatting. Further details on Go time formatting can\nbe found at https://pkg.go.dev/time, while further details on strftime\nformatting can be read by checking \"man strftime\".\n\nATTRIBUTES\n\nEach record (or batch of records) has a set of possible attributes. Internally,\nthese are packed into bit flags. Printing an attribute requires first selecting\nwhich attribute you want to print, and then optionally specifying how you want\nit to be printed:\n\n     %a{compression}\n     %a{compression;number}\n     %a{compression;big64}\n     %a{compression;hex8}\n\nCompression is by default printed as text (\"none\", \"gzip\", ...). Compression\ncan be printed as a number with \";number\", where number is any number\nformatting option described above. No compression is 0, gzip is 1, etc.\n\n     %a{timestamp-type}\n     %a{timestamp-type;big64}\n\nThe record's timestamp type is printed as -1 for very old records (before\ntimestamps existed), 0 for client generated timestamps, and 1 for broker\ngenerated timestamps. Number formatting can be controlled with \";number\".\n\n     %a{transactional-bit}\n     %a{transactional-bit;bool}\n\nPrints 1 if the record a part of a transaction or 0 if it is not.\nNumber formatting can be controlled with \";number\".\n\n     %a{control-bit}\n     %a{control-bit;bool}\n\nPrints 1 if the record is a commit marker or 0 if it is not.\nNumber formatting can be controlled with \";number\".\n\nTEXT\n\nText fields without modifiers default to writing the raw bytes. Alternatively,\nthere are the following modifiers:\n\n    %t{hex}\n    %k{base64}\n    %v{base64raw}\n    %v{unpack[<bBhH>iIqQc.$]}\n\nThe hex modifier hex encodes the text, the base64 modifier base64 encodes the\ntext with standard encoding, and the base64raw modifier encodes the text with\nraw standard encoding. The unpack modifier has a further internal\nspecification, similar to timestamps above:\n\n    x    pad character (does not parse input)\n    <    switch what follows to little endian\n    >    switch what follows to big endian\n\n    b    signed byte\n    B    unsigned byte\n    h    int16  (\"half word\")\n    H    uint16 (\"half word\")\n    i    int32\n    I    uint32\n    q    int64  (\"quad word\")\n    Q    uint64 (\"quad word\")\n\n    c    any character\n    .    alias for c\n    s    consume the rest of the input as a string\n    $    match the end of the line (append error string if anything remains)\n\nUnpacking text can allow translating binary input into readable output. If a\nvalue is a big-endian uint32, %v will print the raw four bytes, while\n%v{unpack[>I]} will print the number in as ascii. If unpacking exhausts the\ninput before something is unpacked fully, an error message is appended to the\noutput.\n\nHEADERS\n\nHeaders are formatted with percent encoding inside of the modifier:\n\n    %h{ %k=%v{hex} }\n\nwill print all headers with a space before the key and after the value, an\nequals sign between the key and value, and with the value hex encoded. Header\nformatting actually just parses the internal format as a record format, so all\nof the above rules about %K, %V, text, and numbers apply.\n\nEXAMPLES\n\nA key and value, separated by a space and ending in newline:\n    -f '%k %v\\n'\nA key length as four big endian bytes, and the key as hex:\n    -f '%K{big32}%k{hex}'\nA little endian uint32 and a string unpacked from a value:\n    -f '%v{unpack[is$]}'\n\nOFFSETS\n\nThe --offset flag allows for specifying where to begin consuming, and\noptionally, where to stop consuming. The literal words \"start\" and \"end\"\nspecify consuming from the start and the end.\n\n    start     consume from the beginning\n    end       consume from the end\n    :end      consume until the current end\n    +oo       consume oo after the current start offset\n    -oo       consume oo before the current end offset\n    oo        consume after an exact offset\n    oo:       alias for oo\n    :oo       consume until an exact offset\n    o1:o2     consume from exact offset o1 until exact offset o2\n    @t        consume starting from a given timestamp\n    @t:       alias for @t\n    @:t       consume until a given timestamp\n    @t1:t2    consume from timestamp t1 until timestamp t2\n\nThere are a few options for timestamps, with each option being evaluated\nuntil one succeeds:\n\n    13 digits             parsed as a unix millisecond\n    9 digits              parsed as a unix second\n    YYYY-MM-DD            parsed as a day, UTC\n    YYYY-MM-DDTHH:MM:SSZ  parsed as RFC3339, UTC; fractional seconds optional (.MMM)\n    -dur                  duration ago; from now (as t1) or from t1 (as t2)\n    dur                   for t2 in @t1:t2, relative duration from t1\n    end                   for t2 in @t1:t2, the current end of the partition\n\nDurations are parsed simply:\n\n    3ms    three milliseconds\n    10s    ten seconds\n    9m     nine minutes\n    1h     one hour\n    1m3ms  one minute and three milliseconds\n\nFor example,\n\n    -o @2022-02-14:1h   consume 1h of time on Valentine's Day 2022\n    -o @-48h:-24h       consume from 2 days ago to 1 day ago\n    -o @-1m:end         consume from 1m ago until now\n    -o @:-1hr           consume from the start until an hour ago",
        "usage": "Usage:\n  rpk topic consume TOPICS... [flags]",
        "flags": {
            "-b, --balancer": {
                "type": "string",
                "description": "Group balancer to use if group consuming (range, roundrobin, sticky, cooperative-sticky) (default \"cooperative-sticky\")."
            },
            "--fetch-max-bytes": {
                "type": "int32",
                "description": "Maximum amount of bytes per fetch request per broker (default 1048576)."
            },
            "--fetch-max-wait": {
                "type": "duration",
                "description": "Maximum amount of time to wait when fetching from a broker before the broker replies (default 5s)."
            },
            "-f, --format": {
                "type": "string",
                "description": "Output format (see --help for details) (default \"json\")."
            },
            "-g, --group": {
                "type": "string",
                "description": "Group to use for consuming (incompatible with -p)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for consume."
            },
            "--meta-only": {
                "type": "-",
                "description": "Print all record info except the record value (for -f json)."
            },
            "-n, --num": {
                "type": "int",
                "description": "Quit after consuming this number of records (0 is unbounded)."
            },
            "-o, --offset": {
                "type": "string",
                "description": "Offset to consume from / to (start, end, 47, +2, -3) (default \"start\")."
            },
            "-p, --partitions": {
                "type": "int32",
                "description": "int32Slice     Comma delimited list of specific partitions to consume (default [])."
            },
            "--pretty-print": {
                "type": "-",
                "description": "Pretty print each record over multiple lines (for -f json) (default true)."
            },
            "--print-control-records": {
                "type": "-",
                "description": "Opt in to printing control records."
            },
            "--read-committed": {
                "type": "-",
                "description": "Opt in to reading only committed offsets."
            },
            "-r, --regex": {
                "type": "-",
                "description": "Parse topics as regex; consume any topic that matches any expression."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic create": {
        "description": "Create topics.\n\nAll topics created with this command will have the same number of partitions,\nreplication factor, and key/value configs.\n\nFor example,\n\n\tcreate -c cleanup.policy=compact -r 3 -p 20 foo bar\n\nwill create two topics, foo and bar, each with 20 partitions, 3 replicas, and\nthe cleanup.policy=compact config option set.",
        "usage": "Usage:\n  rpk topic create [TOPICS...] [flags]",
        "flags": {
            "-d, --dry": {
                "type": "-",
                "description": "Dry run: validate the topic creation request; do not create topics."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for create."
            },
            "-p, --partitions": {
                "type": "int32",
                "description": "Number of partitions to create per topic; -1 defaults to the cluster's default_topic_partitions (default -1)."
            },
            "-r, --replicas": {
                "type": "int16",
                "description": "Replication factor (must be odd); -1 defaults to the cluster's default_topic_replications (default -1)."
            },
            "-c, --topic-config": {
                "type": "stringArray",
                "description": "key=value; Config parameters (repeatable; e.g. -c cleanup.policy=compact)."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic delete": {
        "description": "Delete topics.\n\nThis command deletes all requested topics, printing the success or fail status\nper topic.\n\nThe --regex flag (-r) opts into parsing the input topics as regular expressions\nand deleting any non-internal topic that matches any of expressions. The input\nexpressions are wrapped with ^ and $ so that the expression must match the\nwhole topic name (which also prevents accidental delete-everything mistakes).\n\nThe topic list command accepts the same input regex format as this delete\ncommand. If you want to check what your regular expressions will delete before\nactually deleting them, you can check the output of 'rpk topic list -r'.\n\nFor example,\n\n    delete foo bar            # deletes topics foo and bar\n    delete -r '^f.*' '.*r$'   # deletes any topic starting with f and any topics ending in r\n    delete -r '.*'            # deletes all topics\n    delete -r .               # deletes any one-character topics",
        "usage": "Usage:\n  rpk topic delete [TOPICS...] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for delete."
            },
            "-r, --regex": {
                "type": "-",
                "description": "Parse topics as regex; delete any topic that matches any input topic expression."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic describe": {
        "description": "Describe a topic.\n\nThis command prints detailed information about a topic. There are three\npotential sections: a summary of the topic, the topic configs, and a detailed\npartitions section. By default, the summary and configs sections are printed.",
        "usage": "Usage:\n  rpk topic describe [TOPIC] [flags]\n\nAliases:\n  describe, info",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for describe."
            },
            "-a, --print-all": {
                "type": "-",
                "description": "Print all sections."
            },
            "-c, --print-configs": {
                "type": "-",
                "description": "Print the config section."
            },
            "-p, --print-partitions": {
                "type": "-",
                "description": "Print the detailed partitions section."
            },
            "-s, --print-summary": {
                "type": "-",
                "description": "Print the summary section."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic list": {
        "description": "List topics, optionally listing specific topics.\n\nThis command lists all topics that you have access to by default. If specifying\ntopics or regular expressions, this command can be used to know exactly what\ntopics you would delete if using the same input to the delete command.\n\nAlternatively, you can request specific topics to list, which can be used to\ncheck authentication errors (do you not have access to a topic you were\nexpecting to see?), or to list all topics that match regular expressions.\n\nThe --regex flag (-r) opts into parsing the input topics as regular expressions\nand listing any non-internal topic that matches any of expressions. The input\nexpressions are wrapped with ^ and $ so that the expression must match the\nwhole topic name. Regular expressions cannot be used to match internal topics,\nas such, specifying both -i and -r will exit with failure.\n\nLastly, --detailed flag (-d) opts in to printing extra per-partition\ninformation.",
        "usage": "Usage:\n  rpk topic list [flags]\n\nAliases:\n  list, ls",
        "flags": {
            "-d, --detailed": {
                "type": "-",
                "description": "Print per-partition information for topics."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for list."
            },
            "-i, --internal": {
                "type": "-",
                "description": "Print internal topics."
            },
            "-r, --regex": {
                "type": "-",
                "description": "Parse topics as regex; list any topic that matches any input topic expression."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk topic produce": {
        "description": "Produce records to a topic.\n\nProducing records reads from STDIN, parses input according to --format, and\nproduce records to Redpanda. The input formatter understands a wide variety of\nformats.\n\nParsing input operates on either sizes or on delimiters, both of which can be\nspecified in the same formatting options. If using sizes to specify something,\nthe size must come before what it is specifying. Delimiters match on an exact\ntext basis. This command will quit with an error if any input fails to match\nyour specified format.\n\nSlashes can be used for common escapes:\n\n    \\t \\n \\r \\\\ \\xNN\n\nmatches tabs, newlines, carriage returns, slashes, and hex encoded characters.\n\nPercent encoding reads into specific values of a record:\n\n    %t    topic\n    %T    topic length\n    %k    key\n    %K    key length\n    %v    value\n    %V    value length\n    %h    begin the header specification\n    %H    number of headers\n    %p    partition (if using the --partition flag)\n\nThree escapes exist to parse characters that are used to modify the previous\nescapes:\n\n    %%    percent sign\n    %{    left brace\n    %}    right brace\n\nMODIFIERS\n\nText and numbers can be read in multiple formats, and the default format can be\nchanged within brace modifiers. %v reads a value, while %v{hex} reads a value\nand then hex decodes it before producing. %T reads the length of a topic from\nthe input, while %T{3} reads exactly three bytes for a topic from the input.\n\nAll modifiers go within braces following a percent-escape.\n\nNUMBERS\n\nReading number values can have the following modifiers:\n\n     ascii       parse numeric digits until a non-numeric (default)\n\n     hex64       sixteen hex characters\n     hex32       eight hex characters\n     hex16       four hex characters\n     hex8        two hex characters\n     hex4        one hex character\n\n     big64       eight byte big endian number\n     big32       four byte big endian number\n     big16       two byte big endian number\n     big8        alias for byte\n\n     little64    eight byte little endian number\n     little32    four byte little endian number\n     little16    two byte little endian number\n     little8     alias for byte\n\n     byte        one byte number\n     <digits>    directly specify the length as this many digits\n     bool        read \"true\" as 1, \"false\" as 0\n\nWhen reading number sizes, the size corresponds to the size of the encoded\nvalues, not the decoded values. \"%T{6}%t{hex}\" will read six hex bytes and\ndecode into three.\n\nTEXT\n\nReading text values can have the following modifiers:\n\n    hex       read text then hex decode it\n    base64    read text then std-encoding base64 decode it\n    re        read text matching a regular expression\n\nHEADERS\n\nHeaders are parsed with an internal key / value specifier format. For example,\nthe following will read three headers that begin and end with a space and are\nseparated by an equal:\n\n    %H{3}%h{ %k=%v }\n\nEXAMPLES\n\nIn the below examples, we can parse many records at once. The produce command\nreads input and tokenizes based on your specified format. Every time the format\nis completely matched, a record is produced and parsing begins anew.\n\nA key and value, separated by a space and ending in newline:\n    -f '%k %v\\n'\nA four byte topic, four byte key, and four byte value:\n    -f '%T{4}%K{4}%V{4}%t%k%v'\nA value to a specific partition, if using a non-negative --partition flag:\n    -f '%p %v\\n'\nA big-endian uint16 key size, the text \" foo \", and then that key:\n    -f '%K{big16} foo %k'\nA value that can be two or three characters followed by a newline:\n    -f '%v{re#...?#}\\n'\n\nMISC\n\nProducing requires a topic to produce to. The topic can be specified either\ndirectly on as an argument, or in the input text through %t. A parsed topic\ntakes precedence over the default passed in topic. If no topic is specified\ndirectly and no topic is parsed, this command will quit with an error.\n\nThe input format can parse partitions to produce directly to with %p. Doing so\nrequires specifying a non-negative --partition flag. Any parsed partition\ntakes precedence over the --partition flag; specifying the flag is the main\nrequirement for being able to directly control which partition to produce to.\n\nYou can also specify an output format to write when a record is produced\nsuccessfully. The output format follows the same formatting rules as the topic\nconsume command. See that command's help text for a detailed description.",
        "usage": "Usage:\n  rpk topic produce [TOPIC] [flags]",
        "flags": {
            "--acks": {
                "type": "int",
                "description": "Number of acks required for producing (-1=all, 0=none, 1=leader) (default -1)."
            },
            "--allow-auto-topic-creation": {
                "type": "-",
                "description": "Auto-create non-existent topics; requires auto_create_topics_enabled on the broker."
            },
            "-z, --compression": {
                "type": "string",
                "description": "Compression to use for producing batches (none, gzip, snapy, lz4, zstd) (default \"snappy\")."
            },
            "--delivery-timeout": {
                "type": "duration",
                "description": "Per-record delivery timeout, if non-zero, min 1s."
            },
            "-f, --format": {
                "type": "string",
                "description": "Input record format (default \"%v\\n\")."
            },
            "-H, --header": {
                "type": "stringArray",
                "description": "Headers in format key:value to add to each record (repeatable)."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for produce."
            },
            "-k, --key": {
                "type": "string",
                "description": "A fixed key to use for each record (parsed input keys take precedence)."
            },
            "--max-message-bytes": {
                "type": "int32",
                "description": "If non-negative, maximum size of a record batch before compression (default -1)."
            },
            "-o, --output-format": {
                "type": "string",
                "description": "what to write to stdout when a record is successfully produced (default \"Produced to partition %p at offset %o with timestamp %d.\\n\")."
            },
            "-p, --partition": {
                "type": "int32",
                "description": "Partition to directly produce to, if non-negative (also allows %p parsing to set partitions) (default -1)."
            },
            "-Z, --tombstone": {
                "type": "-",
                "description": "Produce empty values as tombstones."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk version": {
        "description": "Check the current version",
        "usage": "Usage:\n  rpk version [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for version."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk wasm": {
        "description": "Deploy and remove inline WASM engine scripts",
        "usage": "Usage:\n  rpk wasm [command]",
        "flags": {
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for wasm."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk wasm deploy": {
        "description": "Deploy inline WASM function",
        "usage": "Usage:\n  rpk wasm deploy [PATH] [flags]",
        "flags": {
            "--description": {
                "type": "string",
                "description": "Optional description about what the wasm function does."
            },
            "-h, --help": {
                "type": "-",
                "description": "Help for deploy."
            },
            "--name": {
                "type": "string",
                "description": "Unique deploy identifier attached to the instance of this script."
            },
            "--type": {
                "type": "string",
                "description": "WASM engine type (async, data-policy) (default \"async\")."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk wasm generate": {
        "description": "Create a npm template project for inline WASM engine",
        "usage": "Usage:\n  rpk wasm generate [PROJECT DIRECTORY] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for generate."
            },
            "--skip-version": {
                "type": "-",
                "description": "Omit wasm-api version check from npm, use default instead."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk wasm remove": {
        "description": "Remove inline WASM function",
        "usage": "Usage:\n  rpk wasm remove [NAME] [flags]",
        "flags": {
            "-h, --help": {
                "type": "-",
                "description": "Help for remove."
            },
            "--type": {
                "type": "string",
                "description": "WASM engine type (async, data-policy) (default \"async\")."
            },
            "--brokers": {
                "type": "strings",
                "description": "Comma-separated list of broker ip:port pairs (e.g. --brokers '192.168.78.34:9092,192.168.78.35:9092,192.179.23.54:9092'). Alternatively, you may set the REDPANDA_BROKERS environment variable with the comma-separated list of broker addresses."
            },
            "--config": {
                "type": "string",
                "description": "Redpanda config file, if not set the file will be searched for in the default locations."
            },
            "--password": {
                "type": "string",
                "description": "SASL password to be used for authentication."
            },
            "--sasl-mechanism": {
                "type": "string",
                "description": "The authentication mechanism to use. Supported values: SCRAM-SHA-256, SCRAM-SHA-512."
            },
            "--tls-cert": {
                "type": "string",
                "description": "The certificate to be used for TLS authentication with the broker."
            },
            "--tls-enabled": {
                "type": "-",
                "description": "Enable TLS for the Kafka API (not necessary if specifying custom certs)."
            },
            "--tls-key": {
                "type": "string",
                "description": "The certificate key to be used for TLS authentication with the broker."
            },
            "--tls-truststore": {
                "type": "string",
                "description": "The truststore to be used for TLS communication with the broker."
            },
            "--user": {
                "type": "string",
                "description": "SASL user to be used for authentication."
            },
            "-v, --verbose": {
                "type": "-",
                "description": "Enable verbose logging (default: false)."
            }
        }
    },
    "rpk_version": "v23.1.6 (rev cc47e1ad1)"
}